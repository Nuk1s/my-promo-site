// app.js

// –†–∞–∑—Ä–µ—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –≤–Ω–µ—à–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
const meta = document.createElement('meta');
meta.httpEquiv = "Content-Security-Policy";
meta.content = "default-src 'self' https: 'unsafe-inline' 'unsafe-eval' data: gap:";
document.head.appendChild(meta);

const SoundManager = {
    hoverSound: new Audio('./sounds/navodka.mp3'),
    copySound: new Audio('./sounds/ckilk.mp3'),
    
    init: function() {
        this.hoverSound.volume = 0.3;
        this.copySound.volume = 0.7;
        this.hoverSound.preload = 'auto';
        this.copySound.preload = 'auto';
    }
};
SoundManager.init();

const initialCards = [
    {
        id: 1,
        title: "–ü—Ä–∏–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏",
        image: "card1.jpg",
        link: "#",
        promoCodes: ["PROMO1", "PROMO2"],
        instruction: [
            {text: "–®–∞–≥ 1: –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥", image: "step1.jpg"},
            {text: "–®–∞–≥ 2: –ü–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å—ã", image: "step2.jpg"}
        ]
    }
];

document.addEventListener('DOMContentLoaded', () => {
    initCards();
    setupEventListeners();
});

function initCards() {
    if (!localStorage.getItem('cards')) {
        localStorage.setItem('cards', JSON.stringify(initialCards));
    }
    const cards = JSON.parse(localStorage.getItem('cards')) || [];
    renderCards(cards);
}

function renderCards(cards) {
    const grid = document.querySelector('.grid');
    grid.innerHTML = cards.map(card => `
        <div class="card">
            <div class="card-image">
                <img src="${card.image}" alt="${card.title}">
            </div>
            <div class="card-content">
                <h3>${card.title}</h3>
                <div class="promo-section">
                    ${card.promoCodes.map(code => `
                        <div class="promo-code">
                            <span>${code.trim()}</span>
                            <button class="copy-btn">–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
                        </div>
                    `).join('')}
                </div>
                <div class="card-buttons">
                    <a href="${card.link}" class="site-link" target="_blank">–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç</a>
                    <button class="site-link instruction-btn">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</button>
                </div>
            </div>
        </div>
    `).join('');
}

function setupEventListeners() {
    // –ö–Ω–æ–ø–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    document.querySelectorAll('.instruction-btn').forEach((btn, index) => {
        btn.addEventListener('click', () => {
            const cards = JSON.parse(localStorage.getItem('cards'));
            openModal(cards[index].id);
        });
    });

    // –ö–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    document.querySelectorAll('.copy-btn').forEach((btn, index) => {
        btn.addEventListener('click', () => {
            const cards = JSON.parse(localStorage.getItem('cards'));
            copyCode(cards[0].promoCodes[index]);
        });
    });

    // –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    document.querySelectorAll('.nav-btn[data-link]').forEach(btn => {
        btn.addEventListener('click', () => window.open(btn.dataset.link, '_blank'));
    });

    // –ö–æ–Ω—Ç–∞–∫—Ç—ã
    document.getElementById('contactsBtn').addEventListener('click', toggleContacts);
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–æ–∫
    document.querySelectorAll('.modal-close').forEach(btn => {
        btn.addEventListener('click', closeAllModals);
    });

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    window.addEventListener('click', (e) => {
        if (e.target.classList.contains('modal')) closeAllModals();
    });

    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') closeAllModals();
    });

    // –ó–≤—É–∫–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    document.querySelectorAll('button, a').forEach(el => {
        el.addEventListener('mouseenter', () => {
            SoundManager.hoverSound.currentTime = 0;
            SoundManager.hoverSound.play().catch(() => {});
        });
        el.addEventListener('click', () => {
            SoundManager.copySound.currentTime = 0;
            SoundManager.copySound.play().catch(() => {});
        });
    });

    // –ê–Ω–∏–º–∞—Ü–∏—è –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏
    let lastScroll = 0;
    window.addEventListener('scroll', () => {
        const currentScroll = window.pageYOffset;
        const topBar = document.getElementById('topBar');
        
        if (currentScroll > lastScroll && currentScroll > 100) {
            topBar.classList.add('hidden');
        } else {
            topBar.classList.remove('hidden');
        }
        lastScroll = currentScroll;
    });
} // –ó–∞–∫—Ä—ã—Ç–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ setupEventListeners

// –§—É–Ω–∫—Ü–∏–∏ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
function openModal(cardId) {
    const cards = JSON.parse(localStorage.getItem('cards'));
    const card = cards.find(c => c.id === cardId);
    if (!card) return;

    const modalContent = document.getElementById('modalContent');
    modalContent.innerHTML = `
        <h2>üìò ${card.title}</h2>
        ${card.instruction.map((step, i) => `
            <div class="step">
                <p>${i + 1}. ${step.text}</p>
                ${step.image ? `<img src="${step.image}" alt="–®–∞–≥ ${i + 1}">` : ''}
            </div>
        `).join('')}
    `;
    document.getElementById('instructionModal').style.display = 'block';
}

function toggleContacts() {
    const modal = document.getElementById('contactsModal');
    modal.style.display = modal.style.display === 'block' ? 'none' : 'block';
}

function closeAllModals() {
    document.querySelectorAll('.modal').forEach(m => m.style.display = 'none');
}

// –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –±—É—Ñ–µ—Ä–æ–º –æ–±–º–µ–Ω–∞
function copyCode(code) {
    navigator.clipboard.writeText(code)
        .then(() => showNotification(`‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ "${code}" —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!`))
        .catch(err => console.error('–û—à–∏–±–∫–∞:', err));
}

function showNotification(text) {
    const notification = document.getElementById('notification');
    notification.textContent = text;
    notification.classList.add('show');
    setTimeout(() => notification.classList.remove('show'), 2000);
}